generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Codigos {
  id     Int?
  Nombre String? @db.VarChar(100)
  Tipo   String? @db.VarChar(1)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Correlativo {
  id     Int     @id @default(autoincrement())
  Tipo   String? @db.VarChar(50)
  Numero Int?
  pagos  Pagos[]
}

model Pagos {
  id                                 Int                   @id @default(autoincrement()) @map("PK_Pagos")
  correlativoId                      Int?
  Analista                           String?               @db.VarChar(100)
  Cliente                            String?               @db.VarChar(100)
  DescripcionCliente                 String?               @db.VarChar(200)
  Fecha                              DateTime?
  Banco                              String?               @db.VarChar(100)
  Observaciones                      String?               @db.VarChar(200)
  Tipo_doc                           String?               @db.VarChar(50)
  Forma                              String?               @db.VarChar(50)
  TipoMoneda                         String?               @db.VarChar(50)
  Monto_Bolivares                    Decimal?              @db.Decimal(18, 2)
  Monto_Divisa_Cliente               Decimal?              @db.Decimal(18, 2)
  Monto_Divisa_Sistema               Decimal?              @db.Decimal(18, 2)
  Referencia                         String?               @db.VarChar(200)
  NroDocumento                       Int?
  TasaCliente                        Decimal?              @db.Decimal(18, 2)
  TasaSistema                        Decimal?              @db.Decimal(18, 2)
  DiferenciaValor_Dolares            Decimal?              @db.Decimal(18, 2)
  conciliacionId                     Int?
  estatusConciliacion                String?               @db.VarChar(20)
  AnalistaConciliacion               String?               @db.VarChar(100)
  codigoBanco                        Int?
  estadoConfirmado                   String?               @db.VarChar(20)
  estadoNoConfirmado                 String?               @db.VarChar(20)
  fechaConciliacionAnalista          DateTime?
  fechaNoConfirmadoCliente           DateTime?
  fechaPagoConfirmadoAnalistaCliente DateTime?
  tasaAnalista                       Decimal?              @db.Decimal(18, 2)
  estatusPago                        String?               @db.VarChar(20)
  movimientosPago                    MovimientosPago[]
  conciliacion                       ConciliacionBancaria? @relation(fields: [conciliacionId], references: [id])
  correlativo                        Correlativo?          @relation(fields: [correlativoId], references: [id])
}

model MovimientosPago {
  id               Int     @id @default(autoincrement())
  pagoId           Int
  tipoDocumento    String  @db.VarChar(50)
  numeroDocumento  String  @db.VarChar(50)
  vendedorAsociado String? @db.VarChar(100)
  pago             Pagos   @relation(fields: [pagoId], references: [id])
}

model LogPagos {
  id               Int      @id @default(autoincrement())
  pagoId           Int
  fechaEliminacion DateTime @default(now())
  usuario          String?  @db.VarChar(100)
  motivo           String?  @db.VarChar(200)
}

model ConciliacionBancaria {
  id                         Int      @id @default(autoincrement())
  fecha                      DateTime @default(now())
  referencia                 String   @db.VarChar(100)
  estatus                    String   @db.VarChar(20)
  monto                      Decimal  @db.Decimal(18, 2)
  diferencia                 Decimal? @db.Decimal(18, 2)
  diferenciaFechaPagoCliente String?
  pagos                      Pagos[]
}

model Permiso {
  id     Int             @id @default(autoincrement())
  Nombre String          @db.VarChar(100)
  Tipo   String          @db.VarChar(1)
  Roles  RoleOnPermiso[]
}

model Role {
  id       Int             @id @default(autoincrement())
  Nombre   String          @db.VarChar(100)
  Permisos RoleOnPermiso[]
  Usuarios Usuario[]
}

model RoleOnPermiso {
  id        Int     @id @default(autoincrement())
  roleId    Int
  permisoId Int
  Permiso   Permiso @relation(fields: [permisoId], references: [id])
  Role      Role    @relation(fields: [roleId], references: [id])

  @@unique([roleId, permisoId])
}

model Usuario {
  id                  Int                  @id @default(autoincrement())
  Nombre              String               @db.VarChar(100)
  email               String               @unique @db.VarChar(100)
  password            String               @db.VarChar(255)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  roleId              Int?
  passwordResetTokens PasswordResetToken[] @relation("UsuarioToPasswordResetToken")
  Role                Role?                @relation(fields: [roleId], references: [id])
}

model PasswordResetToken {
  id      Int      @id @default(autoincrement())
  userId  Int
  token   String   @unique
  expires DateTime
  usuario Usuario  @relation("UsuarioToPasswordResetToken", fields: [userId], references: [id])
}

model Mensaje {
  id        Int      @id @default(autoincrement())
  texto     String
  createdAt DateTime @default(now())
  de        String
  para      String
}
